ASSIGNMENT 1:-

1.
CREATE TABLE Student(Roll Number(5),Name Varchar2(30),Age Number(5),Course Varchar2(5),Math Number(6,2),Physics Number(6,2),Computer Number(6,2),Birthday Date);
Table created.
2.
CREATE TABLE MSc AS SELECT * FROM Student WHERE 1=2;
Table created.
3.
DESC MSc;
pic
4.
CREATE TABLE MCA AS SELECT * FROM Student WHERE 1=2;
Table created.
ALTER TABLE MCA RENAME COLUMN Course TO Department;
Table altered.
ALTER TABLE MCA RENAME COLUMN Name TO First_Name;
Table altered.
5.
DESC MCA;
pic
6.
INSERT INTO Student VALUES(1,'Rahul',19,'BCA',79.5,67,89,'15-jun-93');
1 row created.
INSERT INTO Student VALUES(2,'Kunal',21,'BCA',68,76,59.5,'16-aug-91');
1 row created.
INSERT INTO Student VALUES(3,'Aditi',20,'MSc',90,73,56,'20-sep-92');
1 row created.
INSERT INTO Student VALUES(4,'Sumit',20,'MCA',57.5,78,81,'07-dec-91');
1 row created.
INSERT INTO Student VALUES(5,'Anirban',22,'MCA',80,68,63,'15-sep-94');
1 row created.
INSERT INTO Student VALUES(6,'Kumkum',21,'BCA',72,54.5,60,'08-feb-95');
1 row created.
INSERT INTO Student VALUES(7,'Suman',21,'BCA',91.5,32,61,'10-mar-94');
1 row created.
INSERT INTO Student VALUES(8,'Rohit',22,'MSc',85,76,92,'19-apr-92');
1 row created.
7.
SELECT * FROM Student;
pic
8.
SELECT * FROM Student WHERE Roll=5;
pic
9.
SELECT Roll,Name,Math,Physics,Computer FROM Student;
pic
10.
INSERT INTO MCA SELECT * FROM Student WHERE Course='MCA';
2 rows created.
11.
DESC Student;
pic
DESC MCA;
pic

12.
UPDATE Student SET Math=95 WHERE Roll=7;
1 row updated.

13.
DELETE FROM Student WHERE Roll=2;
1 row deleted.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 2:-

1.
A.
CREATE TABLE Member(Member_Id Number(5) Primary Key,Member_Name Varchar(30) NOT NULL,Member_address Varchar2(50),Acc_Open_Date Date,Membership_type Varchar2(20) CHECK(Membership_type IN('Lifetime','Annual','HalfYearly','Quarterly')),Fees_paid Number(4),Max_Books_Allowed Number(2) CHECK(Max_Books_Allowed<7),Penalty_Amount Number(7,2) CHECK(Penalty_Amount<=1000));
Table created.
B.
CREATE TABLE Books(Book_No Number(6) Primary Key,Book_Name Varchar2(30) NOT NULL,Author_name Varchar2(30),Cost Number(7,2),Category Char(10) CHECK(Category IN('Science','Database','System','Other')));
Table created.
C.
CREATE TABLE Issue(Lib_Issue_Id Number(10) Primary Key,Book_No Number(6),Member_Id Number(5),Issue_Date Date,Return_date Date,Foreign Key(Book_No) REFERENCES Books(Book_No),Foreign Key(Member_Id) REFERENCES Member(Member_Id));
Table created.

2.
A.
INSERT INTO Member VALUES(1,'Sayantan Sinha','Pune','10-Dec-10','Lifetime',2000,6,50);
INSERT INTO Member VALUES(2,'Abhirup Sarkar','Kolkata','19-Jan-11','Annual',1400,3,0);
INSERT INTO Member VALUES(3,'Ritesh Bhuniya','Gujarat','20-Feb-11','Quarterly',350,2,100);
INSERT INTO Member VALUES(4,'Paresh sen','Tripura','21-Mar-11','HalfYearly',700,1,200);
INSERT INTO Member VALUES(5,'Sohini Haldar','Birbhum','11-Apr-11','Lifetime',2000,6,10);
INSERT INTO Member VALUES(6,'Suparna Biswas','Kolkata','12-Apr-11','HalfYearly',700,1,0);
INSERT INTO Member VALUES(7,'Suranjana Basu','Purulia','30-June-11','Annual',1400,3,50);
INSERT INTO Member VALUES(8,'Arpita Roy','Kolkata','31-July-11','HalfYearly',700,1,0);
1 row created.

B.
INSERT INTO Books VALUES(101,'Let us C','Denis Ritchie',450,'Other');
INSERT INTO Books VALUES(102,'Oracle-Complete Ref','Loni',550,'Database');
INSERT INTO Books VALUES(103,'Visual Basic 10','BPB',700,'Other');
INSERT INTO Books VALUES(104,'Mastering SQL','Loni',450,'Database');
INSERT INTO Books VALUES(105,'PL SQL-Ref','Scott Urman',750,'Database');
INSERT INTO Books VALUES(106,'UNIX','Sumitava Das',300,'System');
INSERT INTO Books VALUES(107,'Optics','Ghatak',600,'Science');
INSERT INTO Books VALUES(108,'Data Structure','G.S. Baluja',350,'Other');

C.
INSERT INTO Issue VALUES(7001,101,1,'10-Jan-11',NULL);
INSERT INTO Issue VALUES(7002,102,2,'25-Jan-11',NULL);
INSERT INTO Issue VALUES(7003,104,1,'01-Feb-11',NULL);
INSERT INTO Issue VALUES(7004,104,2,'15-Mar-11',NULL);
INSERT INTO Issue VALUES(7005,101,4,'04-Apr-11',NULL);
INSERT INTO Issue VALUES(7006,108,5,'12-Apr-11',NULL);
INSERT INTO Issue VALUES(7007,101,8,'01-Aug-11',NULL);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 3:-

1.
SELECT BOOK_NAME,COST FROM BOOKS WHERE COST=(SELECT MAX(COST) FROM BOOKS);
2.
SELECT MIN(COST) AS "MINIMUM COST",AVG(COST) AS "AVERAGE COST",SUM(COST) AS "TOTAL COST" FROM BOOKS;
3.
SELECT M.MEMBER_NAME,M.MEMBER_ID FROM MEMBER M,ISSUE I WHERE M.MEMBER_ID=I.MEMBER_ID AND I.ISSUE_DATE BETWEEN '26-JAN-11' AND '14-APR-11';
4.
SELECT BOOK_NAME,AUTHOR_NAME,CATEGORY FROM BOOKS WHERE CATEGORY<>'Other';
5.A.
a.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE SUBSTR(BOOKS.AUTHOR_NAME,5,1)='t';
b.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE AUTHOR_NAME LIKE 'S%';
c.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE AUTHOR_NAME LIKE 'S_%';
d.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE AUTHOR_NAME LIKE '%a';
e.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE SUBSTR(AUTHOR_NAME,3,1)='a' AND SUBSTR(AUTHOR_NAME,5,1)='a';
f.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE AUTHOR_NAME LIKE '%a_';
g.SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE AUTHOR_NAME LIKE 'D%e';
B.
h.SELECT * FROM MEMBER WHERE MEMBER_NAME LIKE 'S%';
i.SELECT * FROM MEMBER WHERE (MEMBER_NAME LIKE 'S%T%' OR MEMBER_NAME LIKE 'A%T%');
no data found.
C.SELECT * FROM BOOKS WHERE BOOK_NAME LIKE '%SQL%';
6.
SELECT COUNT(*) FROM BOOKS WHERE COST>350;
7.
SELECT COUNT(DISTINCT AUTHOR_NAME) AS "TOTAL_AUTHOR" FROM BOOKS;
8.
a.SELECT ABS(-167) AS "ABSOLUTE VALUE" FROM DUAL;
b.SELECT POWER(8,6) AS "POWER" FROM DUAL;
c.SELECT ROUND(134.56789,2) AS "ROUND" FROM DUAL;
d.SELECT SQRT(144) AS "SQUARE ROOT" FROM DUAL;
e.SELECT FLOOR(13.15) AS "FLOOR VALUE", CEIL(13.15) AS "CEIL VALUE" FROM DUAL;
9.
SELECT EXTRACT(YEAR FROM SYSDATE) AS "YEAR",EXTRACT(MONTH FROM SYSDATE) AS "MONTH",EXTRACT(DAY FROM SYSDATE) AS "DAY" FROM DUAL;
10.
SELECT GREATEST(4,5,17) AS "GREATEST VALUE" FROM DUAL;
11.
SELECT LEAST('4','5','17') AS "LEAST VALUE" FROM DUAL;

The resulting value of last two queries are same due to the fact that the values '4', '5', and '17' are treated as strings rather than numeric values. When comparing strings, SQL uses lexicographical order, which means it compares character by character from left to right based on their ASCII values.

In ASCII, the character '1' comes before '4' and '5', hence '17' is considered the least when comparing them as strings.

12.
SELECT SUBSTR('INFOSYS',3,4) AS "EXTRACTED LETTER" FROM DUAL;
13.
SELECT ASCII('a') AS "ASCII OF a",ASCII('S') AS "ASCII OF S" FROM DUAL;
14.
SELECT LENGTH('INFOSYS') AS "LENGTH",REPLACE('INFOSYS','S','T') AS "REPLACE" FROM DUAL;
15.
SELECT MEMBER_NAME,MEMBER_ADDRESS FROM MEMBER WHERE MEMBER_ADDRESS='Kolkata';
16.
SELECT BOOK_NAME FROM BOOKS WHERE COST BETWEEN 300 AND 500;
17.
SELECT MEMBER_NAME FROM MEMBER WHERE MEMBERSHIP_TYPE='HalfYearly';
18.
SELECT MEMBER_NAME FROM MEMBER WHERE EXTRACT(YEAR FROM ACC_OPEN_DATE)=2011;
19.
SELECT M.PENALTY_AMOUNT FROM MEMBER M,ISSUE I,BOOKS B WHERE M.MEMBER_ID=I.MEMBER_ID AND I.BOOK_NO=B.BOOK_NO AND B.BOOK_NAME='Let us C';
20.
SELECT M.MAX_BOOKS_ALLOWED FROM MEMBER M,ISSUE I WHERE M.MEMBER_ID=I.MEMBER_ID AND EXTRACT(MONTH FROM I.ISSUE_DATE)='1';

SELECT M.MAX_BOOKS_ALLOWED FROM MEMBER M,ISSUE I WHERE M.MEMBER_ID=I.MEMBER_ID AND I.ISSUE_DATE BETWEEN TO_DATE('01-JAN-2011') AND TO_DATE('31-JAN-2011');
21.
SELECT M.MEMBER_NAME FROM MEMBER M WHERE M.MEMBER_ID NOT IN (SELECT I.MEMBER_ID FROM ISSUE I); 
22.
SELECT BOOK_NAME,CATEGORY FROM BOOKS WHERE COST IS NULL;
no data found.  
23.
SELECT BOOK_NAME FROM BOOKS WHERE AUTHOR_NAME='Loni' AND COST<600;
24.
SELECT * FROM ISSUE WHERE RETURN_DATE IS NULL;
25.
SELECT * FROM BOOKS WHERE CATEGORY IN ('Science','Database');
26.
SELECT MEMBER_ID, MEMBER_NAME, PENALTY_AMOUNT FROM MEMBER ORDER BY PENALTY_AMOUNT DESC;
27.
SELECT * FROM BOOKS ORDER BY CATEGORY ASC,COST DESC;
28.
SELECT INITCAP(BOOK_NAME) AS "BOOK_NAME", UPPER(AUTHOR_NAME) AS "AUTHOR_NAME" FROM BOOKS ORDER BY BOOK_NAME DESC;
29.
SELECT BOOK_NAME,AUTHOR_NAME,COST,
    CASE 
        WHEN CATEGORY = 'Database' THEN 'D'
        WHEN CATEGORY = 'Science' THEN 'S'
        WHEN CATEGORY = 'RDBMS' THEN 'R'
        ELSE 'O'
    END AS CATEGORY
FROM BOOKS;
30.
SELECT * FROM MEMBER WHERE EXTRACT(YEAR FROM ACC_OPEN_DATE) = 2011;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 4:-
1.
CREATE TABLE Sailor(SID Varchar2(4) Primary key CHECK(SID LIKE 's%'),SNAME Varchar2(10) CHECK(SNAME=INITCAP(SNAME)),MNAME Varchar2(10),SURNAME Varchar2(10) NOT NULL,RATING Number(2) Default 0,AGE Number(3,1) NOT NULL);

INSERT INTO Sailor VALUES('s22','Fredrico',NULL,'Roberts',7,45);
INSERT INTO Sailor VALUES('s31','Lubber',NULL,'Sheen',8,55.5);
INSERT INTO Sailor VALUES('s32','Charlotte',NULL,'Gordin',8,25.5);
INSERT INTO Sailor VALUES('s58','Mary','Beth ','Lyon',10,35);
INSERT INTO Sailor VALUES('s64','Horatio',NULL,'Powell',7,35.4);
INSERT INTO Sailor VALUES('s71','Zorba',NULL,'Alex',10,16);
INSERT INTO Sailor VALUES('s29','Brutus ',NULL,'Slater ',1,33.8);
INSERT INTO Sailor VALUES('s95','Deep','Graceb','Davis ',3,63.5);
INSERT INTO Sailor VALUES('s74','Horatio',NULL,'Forrest',9,35);
INSERT INTO Sailor VALUES('s85','Sara','Art','Powell',3,25.5);
INSERT INTO Sailor VALUES('s80','Deep','Kumer','Kumer',6,17);
INSERT INTO Sailor VALUES('s87','Deep','Kumer','Jha',NULL,51);

2.
CREATE TABLE Boat(BID NUMBER(3) Primary key, BNAME Varchar2(10) CHECK(BNAME=UPPER(BNAME)),COLOUR Varchar2(6) CHECK(COLOUR IN('red','green','blue')));

INSERT INTO Boat VALUES(101,'INTERLAKE','blue');
INSERT INTO Boat VALUES(102,'INTERLAKE','red');
INSERT INTO Boat VALUES(103,'CLIPPER','green');
INSERT INTO Boat VALUES(104,'MARINE','red');

3.
CREATE TABLE Reserved(SID Varchar2(4), BID Number(3),FOREIGN KEY(SID) REFERENCES Sailor(SID),FOREIGN KEY(BID) REFERENCES Boat(BID),DAY DATE CHECK(DAY<'1-JAN-2000'),PRIMARY KEY(SID,BID));

INSERT INTO Reserved VALUES('s22',101,'10-OCT-98');
INSERT INTO Reserved VALUES('s22',103,'10-AUG-98');
INSERT INTO Reserved VALUES('s22',102,'10-OCT-98');
INSERT INTO Reserved VALUES('s22',104,'10-JUL-98');
INSERT INTO Reserved VALUES('s31',102,'11-OCT-98');
INSERT INTO Reserved VALUES('s31',103,'11-JUN-98');
INSERT INTO Reserved VALUES('s31',104,'11-DEC-98');
INSERT INTO Reserved VALUES('s64',101,'09-MAY-98');
INSERT INTO Reserved VALUES('s64',102,'09-AUG-98');
INSERT INTO Reserved VALUES('s74',103,'09-AUG-98');
INSERT INTO Reserved VALUES('s80',102,'07-JUL-98');
INSERT INTO Reserved VALUES('s87',101,'08-JUL-98');
INSERT INTO Reserved VALUES('s87',102,'12-DEC-98');

1.
SELECT UPPER(SNAME||' '||MNAME||' '||SURNAME) AS "NAME",AGE FROM SAILOR;
2.
SELECT * FROM SAILOR ORDER BY SNAME,MNAME,SURNAME ASC;
3.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME" FROM SAILOR;
4.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME",RATING FROM SAILOR WHERE RATING BETWEEN 5 AND 10;
5.
SELECT * FROM SAILOR ORDER BY RATING ASC,AGE DESC;
6.
SELECT * FROM SAILOR WHERE SNAME='Horatio' AND AGE=35.4;
7.
SELECT SNAME,MNAME,SURNAME FROM SAILOR S,RESERVED R WHERE S.SID=R.SID AND BID=104;
8.
SELECT R.SID FROM RESERVED R,BOAT B WHERE R.BID=B.BID AND COLOUR='red';
9.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE RATING IS NOT NULL;
10.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE RATING IS NULL;
11.
SELECT COLOUR FROM BOAT B,SAILOR S,RESERVED R WHERE B.BID=R.BID AND R.SID=S.SID AND SNAME='Lubber'; 
12.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME" FROM SAILOR S,RESERVED R WHERE S.SID=R.SID AND BID IS NOT NULL;
13.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE SNAME='%B' AND SURNAME='%B' AND LENGTH(SNAME||' '||MNAME||' '||SURNAME)>=3;
no data found
14.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE SNAME='%B' AND SURNAME='%B' AND LENGTH(SNAME||' '||MNAME||' '||SURNAME)=3;
no data found
15.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME" FROM SAILOR S,RESERVED R,BOAT B WHERE S.SID=R.SID AND R.BID=B.BID AND (COLOUR='red' OR COLOUR='green');
16.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME" FROM SAILOR S,RESERVED R,BOAT B WHERE S.SID=R.SID AND R.BID=B.BID AND COLOUR='red' AND COLOUR NOT IN ('green');
17.
SELECT SNAME,MNAME,SURNAME FROM SAILOR S,RESERVED R WHERE S.SID=R.SID AND BID=103;
18.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME" FROM SAILOR S,RESERVED R,BOAT B WHERE S.SID=R.SID AND R.BID=B.BID AND COLOUR='red';
19.
SELECT DISTINCT(SNAME||' '||MNAME||' '||SURNAME) AS "NAME" FROM SAILOR S,RESERVED R,BOAT B WHERE S.SID=R.SID AND R.BID=B.BID AND COLOUR NOT IN ('red');
20.
SELECT * FROM SAILOR WHERE RATING > (SELECT MAX(RATING) FROM SAILOR WHERE SNAME='Horatio');
21.
SELECT AVG(AGE) AS "AVARAGE_AGE" FROM SAILOR WHERE RATING=10;
22.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE AGE>(SELECT MAX(AGE) FROM SAILOR WHERE RATING=10);
23.
SELECT RATING,MIN(AGE) AS "MIN AGE" FROM SAILOR GROUP BY RATING;
24.
SELECT RATING, SNAME, MNAME, SURNAME FROM SAILOR WHERE AGE>=18 GROUP BY RATING, SNAME, MNAME, SURNAME;
25.
SELECT RATING,AVG(AGE) AS "AVG AGE" FROM SAILOR GROUP BY RATING HAVING COUNT(*) >= 2;
26.
SELECT BID,COUNT(*) AS "RESERVATION COUNT" FROM RESERVED WHERE BID IN(SELECT BID FROM BOAT WHERE COLOUR='red') GROUP BY BID;
27.
SELECT * FROM SAILOR WHERE RATING=(SELECT MAX(RATING) FROM SAILOR WHERE RATING NOT IN(SELECT MAX(RATING) FROM SAILOR));
28.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE RATING=(SELECT MIN(RATING) FROM SAILOR WHERE RATING>(SELECT MIN(RATING) FROM SAILOR WHERE RATING>(SELECT MIN(RATING) FROM SAILOR)));
29.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE SID IN(SELECT SID FROM RESERVED GROUP BY SID HAVING COUNT(DISTINCT BID)=(SELECT COUNT(*) FROM BOAT));
30.
SELECT SNAME,MNAME,SURNAME FROM SAILOR WHERE SID IN(SELECT SID FROM RESERVED GROUP BY SID HAVING COUNT(DISTINCT BID)>2);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 5:-

CREATE TABLE EMPLOYEE (
  FNAME VARCHAR(20),
  MINIT VARCHAR(1),
  LNAME VARCHAR(20),
  SSN NUMBER(10),
  BDATE date,
  ADDRESS VARCHAR(50),
  SEX VARCHAR(1),
  SALARY NUMBER(10),
  SUPERSSN NUMBER(10),
  DNO NUMBER(10),
  PRIMARY KEY(SSN)
);

CREATE TABLE DEPARTMENT(
DNAME VARCHAR(20),
DNUMBER NUMBER(10) PRIMARY KEY,
MGRSSN NUMBER(10),
MGRSTARTDATE date,
FOREIGN KEY (MGRSSN) REFERENCES EMPLOYEE(SSN)
);

CREATE TABLE DEPT_LOCATIONS(
DNUMBER NUMBER(10),
DLOCATION VARCHAR(20),
FOREIGN KEY(DNUMBER) REFERENCES DEPARTMENT(DNUMBER)
);

CREATE TABLE PROJECT(
PNAME VARCHAR(20),
PNUMBER NUMBER(10),
PLOCATION VARCHAR(20),
DNUM NUMBER(10),
PRIMARY KEY(PNUMBER),
FOREIGN KEY(DNUM) REFERENCES DEPARTMENT(DNUMBER)
);

CREATE TABLE WORKS_ON(
ESSN NUMBER(10),
PNO NUMBER(10),
HOURS NUMBER(10) DEFAULT NULL,
FOREIGN KEY (ESSN) REFERENCES EMPLOYEE(SSN),
FOREIGN KEY (PNO) REFERENCES PROJECT(PNUMBER)
);

CREATE TABLE DEPENDENT(
ESSN NUMBER(10),
DEPENDENT_NAME VARCHAR(20),
SEX VARCHAR(1),
BDATE date,
RELATIONSHIP VARCHAR(20),
FOREIGN KEY (ESSN) REFERENCES EMPLOYEE(SSN)
);

INSERT INTO EMPLOYEE VALUES ('John','B','Smith',123456789,'09-JAN-1995','731 Fondren,Houston,TX','M',30000,333445555,5);
INSERT INTO EMPLOYEE VALUES ('Alicia','J','Zelaya',999887777,'19-JUL-1951','3321 Castle,Spring,TX','F',25000,987654321,4);
INSERT INTO EMPLOYEE VALUES ('Jennifer','S','Wallace',987654321,'20-JUN-1941','291 Berry,bellaire,TX','F',43000,888665555,4);
INSERT INTO EMPLOYEE VALUES ('Ramesh','K','Narayan',666884444,'15-SEP-1962','975 Fire Oak,Humble,TX','M',38000,333445555,5);
INSERT INTO EMPLOYEE VALUES ('Joyce','A','Bond',453453453,'31-JUL-1963','5631 Rice,Houston,TX','F',25000,333445555,5);
INSERT INTO EMPLOYEE VALUES ('Ahmad','V','Jabbar',333445555,'29-MAR-1969','980 Dallas,Houston,TX','M',25000,987654321,4);
INSERT INTO EMPLOYEE VALUES ('James','E','Bong',888665555,'10-NOV-1956','450 Stone,Houston,TX','M',55000,987654321,1);

INSERT INTO DEPARTMENT VALUES('Research',5,333445555,'22-MAY-1988');
INSERT INTO DEPARTMENT VALUES('Administration',4,987654321,'1-JAN-1995');
INSERT INTO DEPARTMENT VALUES('Headquarters',1,888665555,'19-JUN-1981');

INSERT INTO DEPT_LOCATIONS VALUES(1,'Houston');
INSERT INTO DEPT_LOCATIONS VALUES(4,'Stafford');
INSERT INTO DEPT_LOCATIONS VALUES(5,'Bellaire');
INSERT INTO DEPT_LOCATIONS VALUES(5,'Sugarland');
INSERT INTO DEPT_LOCATIONS VALUES(5,'Houston');

INSERT INTO PROJECT VALUES ('ProductX',1,'Bellaire',5);
INSERT INTO PROJECT VALUES ('ProductY',2,'Sugarland',5);
INSERT INTO PROJECT VALUES ('ProductZ',3,'Houston',5);
INSERT INTO PROJECT VALUES ('Computerization',10,'Stafford',4);
INSERT INTO PROJECT VALUES ('Reorganization',20,'Houston',1);
INSERT INTO PROJECT VALUES ('Newbenefits',30,'Stafford',4);

INSERT INTO WORKS_ON VALUES (123456789,1,32.5);
INSERT INTO WORKS_ON VALUES(123456789,2,7.5);
INSERT INTO WORKS_ON VALUES(123456789,3,30.0);
INSERT INTO WORKS_ON VALUES(666884444,3,40.0);
INSERT INTO WORKS_ON VALUES(453453453,1,20.0);
INSERT INTO WORKS_ON VALUES(453453453,2,20.0);
INSERT INTO WORKS_ON VALUES(333445555,2,10.0);
INSERT INTO WORKS_ON VALUES(333445555,3,10.0);
INSERT INTO WORKS_ON VALUES(333445555,10,10.0);
INSERT INTO WORKS_ON VALUES(333445555,20,10.0);
INSERT INTO WORKS_ON VALUES(999887777,30,3);
INSERT INTO WORKS_ON VALUES(999887777,10,10.0);
INSERT INTO WORKS_ON VALUES(666884444,10,35.0);
INSERT INTO WORKS_ON VALUES(666884444,30,5.0);
INSERT INTO WORKS_ON VALUES(987654321,20,15.0);
INSERT INTO WORKS_ON VALUES(987654321,30,20.0);

INSERT INTO DEPENDENT VALUES (999887777,'Alice','F','5-APR-1986','DAUGHTER');
INSERT INTO DEPENDENT VALUES (666884444,'Theodore','M','25-OCT-1983','SON');
INSERT INTO DEPENDENT VALUES (453453453,'Joy','F','3-MAY-1958','SPOUSE');
INSERT INTO DEPENDENT VALUES (987654321,'Abner','M','28-FEB-1942','SPOUSE');
INSERT INTO DEPENDENT VALUES (123456789,'Michael','M','4-JAN-1988','SON');
INSERT INTO DEPENDENT VALUES (123456789,'Alice','F','30-DEC-1988','DAUGHTER');
INSERT INTO DEPENDENT VALUES (123456789,'Elizabeth','F','5-MAY-1967','SPOUSE');

1.
SELECT P.PNUMBER,P.DNUM,E.LNAME,E.BDATE,E.ADDRESS FROM PROJECT P,EMPLOYEE E,DEPARTMENT D WHERE P.DNUM=D.DNUMBER AND D.MGRSSN=E.SSN AND P.PLOCATION='Stafford';
2.
SELECT (FNAME||' '||MINIT||' '||LNAME) "NAME" FROM EMPLOYEE WHERE NOT EXISTS((SELECT PNUMBER FROM PROJECT WHERE DNUM=5) MINUS (SELECT PNO FROM WORKS_ON WHERE SSN=ESSN));
3.
SELECT PNUMBER FROM PROJECT,EMPLOYEE,DEPARTMENT WHERE DNUM=DNO AND SSN=MGRSSN AND LNAME='Smith'
UNION SELECT PNUMBER FROM PROJECT,EMPLOYEE,WORKS_ON WHERE DNO=DNUM AND ESSN=SSN AND LNAME='Smith';
4.
SELECT (FNAME||' '||MINIT||' '||LNAME) "NAME" FROM EMPLOYEE WHERE SSN NOT IN(SELECT ESSN FROM DEPENDENT);
5.
SELECT (FNAME||' '||MINIT||' '||LNAME) "NAME" FROM EMPLOYEE,DEPARTMENT WHERE SSN=MGRSSN AND MGRSSN IN(SELECT ESSN FROM DEPENDENT);
6.
SELECT (E1.FNAME||' '||E1.LNAME) "ENAME",(E2.FNAME||' '||E2.LNAME) "SNAME" FROM EMPLOYEE E1,EMPLOYEE E2 WHERE E2.SSN=E1.SUPERSSN;
7.
SELECT SALARY*1.1 "SALARY" FROM EMPLOYEE,PROJECT,WORKS_ON WHERE SSN=ESSN AND PNO=PNUMBER AND PNAME='ProductX';
8.
SELECT FNAME,LNAME,PNAME FROM EMPLOYEE,PROJECT,DEPARTMENT,WORKS_ON WHERE DNUMBER=DNO AND SSN=ESSN AND PNO=PNUMBER ORDER BY DNAME,LNAME,FNAME;
9.
SELECT FNAME,LNAME FROM EMPLOYEE WHERE SUPERSSN IS NULL;
->no data found
10.
SELECT FNAME,LNAME FROM EMPLOYEE,DEPENDENT WHERE SSN=ESSN AND LNAME=DEPENDENT_NAME;
->no data found
11.
SELECT DISTINCT SSN FROM EMPLOYEE,WORKS_ON WHERE SSN=ESSN AND PNO IN(1,2);
12.
SELECT (FNAME||' '||MINIT||' '||LNAME) "NAME" FROM EMPLOYEE WHERE SALARY>(SELECT MAX(SALARY) FROM EMPLOYEE WHERE DNO=5);
13.
SELECT SUM(SALARY) "SUM" ,MAX(SALARY) "MAX" ,MIN(SALARY) "MIN" ,AVG(SALARY) "AVG" FROM EMPLOYEE;
14.
SELECT SUM(SALARY) "SUM" ,MAX(SALARY) "MAX" ,MIN(SALARY) "MIN" ,AVG(SALARY) "AVG" FROM EMPLOYEE,DEPARTMENT WHERE DNO=DNUMBER AND DNAME='Research';
15.
SELECT FNAME,MINIT,LNAME FROM EMPLOYEE WHERE SSN IN(SELECT ESSN FROM DEPENDENT GROUP BY ESSN HAVING COUNT(*)>=2);
16.
SELECT COUNT(*) AS "EMP_NO" FROM EMPLOYEE WHERE SALARY>40000 GROUP BY DNO HAVING COUNT(*)>5;
->no data found
17.
SELECT PNO,PNAME,COUNT(ESSN) AS "EMP_NUM" FROM WORKS_ON,PROJECT WHERE PNUMBER=PNO GROUP BY(PNAME,PNO) ORDER BY(PNO);
18.
SELECT PNO,PNAME,COUNT(ESSN) AS "EMP_NUM" FROM WORKS_ON,PROJECT WHERE PNUMBER=PNO GROUP BY(PNAME,PNO) HAVING COUNT(*)>2 ORDER BY(PNO);
19.
SELECT PNO,PNAME,COUNT(ESSN) AS "EMP_NUM" FROM WORKS_ON,PROJECT,EMPLOYEE WHERE DNO=5 AND PNUMBER=PNO AND SSN=ESSN GROUP BY(PNAME,PNO) ORDER BY(PNO);
20.
SELECT DNO,COUNT(*) "EMP_NUM" FROM EMPLOYEE,DEPARTMENT WHERE DNO=DNUMBER AND SALARY>40000 GROUP BY(DNO) HAVING COUNT(*)>5;
->no data found
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 6:-
CREATE TABLE MATCH(
SLNO NUMBER(10),
MATCH_ID NUMBER(10) PRIMARY KEY,
TEAM1 VARCHAR(15),
TEAM2 VARCHAR(15),
GROUND VARCHAR(15),
PLAY_DATE DATE,
WINNER VARCHAR2(15)
);

CREATE TABLE PLAYER(
SLNO NUMBER(10),
PLAYER_ID NUMBER(10) PRIMARY KEY,
LNAME VARCHAR(15),
FNAME VARCHAR(15),
COUNTRY VARCHAR(15),
YBORN NUMBER(10),
BPLACE VARCHAR(15),
FTEST NUMBER(10)
);

CREATE TABLE BOWLING(
SLNO NUMBER(10),
MATCH_ID NUMBER(10),
PLAYER_ID NUMBER(10),
NOVERS NUMBER(10),
MAIDENS NUMBER(10),
NRUN_RCV NUMBER(10),
NWICKETS NUMBER(10),
FOREIGN KEY(MATCH_ID) REFERENCES MATCH(MATCH_ID),
FOREIGN KEY(PLAYER_ID) REFERENCES PLAYER(PLAYER_ID)
);

CREATE TABLE BATTING(
SLNO NUMBER(10),
MATCH_ID NUMBER(10),
PLAYER_ID NUMBER(10),
NRUN_SC NUMBER(10),
FOREIGN KEY(MATCH_ID) REFERENCES MATCH(MATCH_ID),
FOREIGN KEY(PLAYER_ID) REFERENCES PLAYER(PLAYER_ID)
);

CREATE SEQUENCE SEQ1
MINVALUE 1
MAXVALUE 5
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SEQ2
MINVALUE 50
MAXVALUE 100
START WITH 100
INCREMENT BY -10;

CREATE SEQUENCE SEQ3
MINVALUE 1000
MAXVALUE 1008
START WITH 1000
INCREMENT BY 2;

CREATE SEQUENCE SEQ4
MINVALUE 501
MAXVALUE 507
START WITH 501
INCREMENT BY 1;

INSERT INTO MATCH VALUES(SEQ1.NEXTVAL,2475,'AUSTRALIA','INDIA','MELBOURN','10-FEB-08','TEAM2');
INSERT INTO MATCH VALUES(SEQ1.NEXTVAL,2576,'INDIA','SRILANKA','ADELAIDE','19-FEB-08','TEAM1');
INSERT INTO MATCH VALUES(SEQ1.NEXTVAL,2677,'AUSTRALIA','INDIA','SYDNEY','02-MAR-08','TEAM1');
INSERT INTO MATCH VALUES(SEQ1.NEXTVAL,2778,'AUSTRALIA','SRILANKA','BRISBANE','04-MAR-08','TEAM2');
INSERT INTO MATCH VALUES(SEQ1.NEXTVAL,2879,'SRILANKA','INDIA','COLOMBO','27-AUG-08','TEAM2');

INSERT INTO PLAYER VALUES(SEQ2.NEXTVAL,49001,'TENDULKAR','SACHIN','INDIA',1973,'MUMBAI',1986);
INSERT INTO PLAYER VALUES(SEQ2.NEXTVAL,49002,'DRAVID','RAHUL','INDIA',1973,'INDORE',1996);
INSERT INTO PLAYER VALUES(SEQ2.NEXTVAL,59001,'VASS','CHAMINDA','SRILANKA',1974,'MATTUMAGALA',1994);
INSERT INTO PLAYER VALUES(SEQ2.NEXTVAL,59002,'JAYASURIYA','SANATH','SRILANKA',1969,'MATARA',1991);
INSERT INTO PLAYER VALUES(SEQ2.NEXTVAL,69001,'LEE','BRETT','AUSTRALIA',1976,'WOLLONGONG',1999);
INSERT INTO PLAYER VALUES(SEQ2.NEXTVAL,69002,'SYMONDS','ANDREW','AUSTRALIA',1975,'BIRMINGHUM',2004);

INSERT INTO BOWLING VALUES(SEQ3.NEXTVAL, 2576,59001,8,3,58,1);
INSERT INTO BOWLING VALUES(SEQ3.NEXTVAL,2677,69001,10,1,27,3);
INSERT INTO BOWLING VALUES(SEQ3.NEXTVAL,2879,49002,7,0,44,0);
INSERT INTO BOWLING VALUES(SEQ3.NEXTVAL,2576,49001,3,2,15,1);
INSERT INTO BOWLING VALUES(SEQ3.NEXTVAL,2778,59001,7,1,20,5);

INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2677,49001,60);
INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2778,59002,71);
INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2879,59001,60);
INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2778,69002,17);
INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2879,59002,45);
INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2576,49001,36);
INSERT INTO BATTING VALUES(SEQ4.NEXTVAL,2475,49002,72);

1.
SELECT GROUND FROM MATCH M,PLAYER P,BATTING B WHERE M.MATCH_ID=B.MATCH_ID AND B.PLAYER_ID=P.PLAYER_ID AND FNAME LIKE 'S%';
2.
SELECT P.PLAYER_ID FROM PLAYER P,BOWLING B WHERE B.MATCH_ID=2576 AND P.PLAYER_ID=B.PLAYER_ID AND P.PLAYER_ID NOT IN(SELECT PLAYER_ID FROM BATTING WHERE MATCH_ID=2576);
3.
SELECT P.PLAYER_ID,AVG(B.NRUN_SC) "BATTING AVARAGE" FROM PLAYER P,BATTING B WHERE P.PLAYER_ID=B.PLAYER_ID AND COUNTRY='INDIA' GROUP BY P.PLAYER_ID;
4.
SELECT (FNAME||' '||LNAME) "NAME",GROUND FROM PLAYER P,BOWLING B,MATCH M WHERE P.PLAYER_ID=B.PLAYER_ID AND B.MATCH_ID=M.MATCH_ID AND NOVERS IN(SELECT MAX(NOVERS) FROM BOWLING);
5.
SELECT NRUN_SC FROM BATTING B,PLAYER P WHERE P.PLAYER_ID=B.PLAYER_ID AND FTEST=1991;
6.
SELECT (FNAME||' '||LNAME) "NAME",NWICKETS FROM PLAYER P,BOWLING B WHERE P.PLAYER_ID=B.PLAYER_ID AND YBORN IN(SELECT MAX(YBORN) FROM PLAYER);
7.
SELECT (FNAME||' '||LNAME) "NAME" FROM PLAYER P,BATTING B WHERE P.PLAYER_ID=B.PLAYER_ID AND B.PLAYER_ID IN (SELECT PLAYER_ID FROM BATTING GROUP BY PLAYER_ID HAVING COUNT(PLAYER_ID)=1);
8.
SELECT (FNAME||' '||LNAME) "NAME",GROUND FROM PLAYER P,MATCH M,BOWLING B WHERE P.PLAYER_ID=B.PLAYER_ID AND B.MATCH_ID=M.MATCH_ID AND NWICKETS=(SELECT MAX(NWICKETS) FROM BOWLING);
9.
SELECT GROUND FROM MATCH M,PLAYER P,BATTING B WHERE M.MATCH_ID=B.MATCH_ID AND B.PLAYER_ID=P.PLAYER_ID AND LNAME='TENDULKAR' AND FNAME='SACHIN' AND NRUN_SC=(SELECT MAX(NRUN_SC) FROM BATTING B,PLAYER P WHERE B.PLAYER_ID=P.PLAYER_ID AND LNAME='TENDULKAR' AND FNAME='SACHIN');
10.
SELECT (FNAME||' '||LNAME) "NAME" FROM PLAYER P,BOWLING B WHERE P.PLAYER_ID=B.PLAYER_ID AND COUNTRY='SRILANKA' AND MAIDENS>=2;
11.
SELECT SUM(NWICKETS) "NWICKETS" FROM BOWLING B,PLAYER P WHERE P.PLAYER_ID=B.PLAYER_ID AND BPLACE='MATTUMAGALA';
12.
SELECT (FNAME||' '||LNAME) AS "NAME" FROM PLAYER P, BOWLING B WHERE B.PLAYER_ID=P.PLAYER_ID GROUP BY (FNAME|| ' ' ||LNAME) HAVING COUNT(*)>1 UNION SELECT (FNAME||' '||LNAME) AS "NAME" FROM PLAYER P, BATTING B WHERE B.PLAYER_ID=P.PLAYER_ID GROUP BY (FNAME||' '||LNAME) HAVING COUNT(*)>1;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 8:-
1.
DECLARE
X NUMBER;
Y NUMBER;
LARGE NUMBER;
BEGIN
X:=:ENTER_THE_FIRST_NUMBER;
Y:=:ENTER_THE_SECOND_NUMBER;

IF X>Y THEN
LARGE:=X;
ELSE 
LARGE:=Y;
END IF;
DBMS_OUTPUT.PUT_LINE('THE LARGEST NUMBER IS: '||LARGE);
END;
2.
DECLARE
X NUMBER;
BEGIN
X:=:ENTER_THE_NUMBER;

IF X MOD 2=0 THEN
DBMS_OUTPUT.PUT_LINE(X || ' IS THE EVEN NUMBER');
ELSE 
DBMS_OUTPUT.PUT_LINE(X || ' IS THE ODD NUMBER');
END IF;
END;
3.
DECLARE
X NUMBER;
I NUMBER;
FACTORIAL NUMBER;
BEGIN
X:=:ENTER_THE_NUMBER_FOR_FACTORIAL;
FACTORIAL:=1;

FOR I IN REVERSE 1 .. X LOOP
FACTORIAL:=FACTORIAL*I;
END LOOP;
DBMS_OUTPUT.PUT_LINE('FACTORIAL OF ' || X || ' IS ' || FACTORIAL);
END;
4.
DECLARE
YEAR NUMBER;
BEGIN
YEAR:=:ENTER_YEAR;

IF YEAR MOD 4=0 AND YEAR MOD 100!=0 OR YEAR MOD 400=0 THEN 
DBMS_OUTPUT.PUT_LINE(YEAR || ' IS A LEAP YEAR');
ELSE
DBMS_OUTPUT.PUT_LINE(YEAR || ' IS NOT A LEAP YEAR');
END IF;
END;
5.
DECLARE
STR VARCHAR(20);
RSTR VARCHAR(20);
BEGIN
STR:=:ENTER_A_STRING;

FOR I IN REVERSE 1 .. LENGTH(STR) LOOP
RSTR:=RSTR || SUBSTR(STR,I,1);
END LOOP;
DBMS_OUTPUT.PUT_LINE('REVERSE STRING IS: '||RSTR);
END;
6.
CREATE TABLE CIRCLE(
RADIUS NUMBER(3),
AREA NUMBER(10,3)
);

DECLARE 
RADIUS NUMBER(3):=1;
AREA NUMBER(10,3);
BEGIN
WHILE RADIUS <= 10 LOOP
AREA:=3.14*RADIUS*RADIUS;
INSERT INTO CIRCLE VALUES (RADIUS,AREA);
RADIUS:=RADIUS+1;
END LOOP;
END;


DECLARE 
RADIUS NUMBER(3);
AREA NUMBER(10,3);
BEGIN
FOR RADIUS IN 1 .. 10 LOOP
AREA:=3.14*RADIUS*RADIUS;
INSERT INTO CIRCLE VALUES (RADIUS,AREA);
END LOOP;
END;
7.
DECLARE
BOOKS_NO BOOKS.BOOK_NO%TYPE;
NEW_COST BOOKS.COST%TYPE;
OLD_COST BOOKS.COST%TYPE;
BEGIN
BOOKS_NO:=:ENTER_BOOK_NUMBER;
NEW_COST:=:ENTER_NEW_COST;
SELECT COST INTO OLD_COST FROM BOOKS WHERE BOOK_NO=BOOKS_NO;
IF OLD_COST < 450 AND NEW_COST < 900 THEN
UPDATE BOOKS SET COST=NEW_COST WHERE BOOK_NO=BOOKS_NO;
DBMS_OUTPUT.PUT_LINE('OLD COST SUCCESSFULLY UPDATED FOR BOOK NO: '||BOOKS_NO);
ELSE
DBMS_OUTPUT.PUT_LINE('ERROR: Old cost value will less than 450 and new cost value will less 
        Than900');
END IF;
END;
8.
DECLARE
MEMREC MEMBER%ROWTYPE;
MEMBERS_ID MEMBER.MEMBER_ID%TYPE;
BEGIN
MEMBERS_ID:=:ENTER_MEMBER_ID;
SELECT * INTO MEMREC FROM MEMBER WHERE MEMBER_ID=MEMBERS_ID;
DBMS_OUTPUT.PUT_LINE('MEMBER NAME: ' || MEMREC.MEMBER_NAME);
DBMS_OUTPUT.PUT_LINE('MEMBER ADDRESS: ' || MEMREC.MEMBER_ADDRESS);
DBMS_OUTPUT.PUT_LINE('FEES PAID: ' || MEMREC.FEES_PAID);
END;
9.
DECLARE
STR VARCHAR2(50);
CLEAN_SPACE_STR VARCHAR2(50);
SPACE_COUNT VARCHAR2(50);
BEGIN 
STR:=:ENTER_STRING;

CLEAN_SPACE_STR:=REPLACE(STR,' ','');
DBMS_OUTPUT.PUT_LINE('STRING WITHOUT SPACE: '||CLEAN_SPACE_STR);
SPACE_COUNT:=LENGTH(STR)-LENGTH(CLEAN_SPACE_STR);
DBMS_OUTPUT.PUT_LINE('NUMBER OF SPACES '||SPACE_COUNT);
END;
10.
DECLARE
STR VARCHAR2(50);
STR_WORD VARCHAR2(50);
BEGIN 
STR:=:ENTER_STRING;

FOR I IN 1 .. LENGTH(STR) LOOP
IF SUBSTR(STR,I,1)!=' ' THEN
STR_WORD:=STR_WORD||SUBSTR(STR,I,1);
ELSE
DBMS_OUTPUT.PUT_LINE(STR_WORD);
STR_WORD:=NULL;
END IF;
END LOOP;
IF STR_WORD IS NOT NULL THEN
DBMS_OUTPUT.PUT_LINE(STR_WORD);
END IF;
END;
11.
DECLARE
MEMREC MEMBER%ROWTYPE;
MEMBERS_ID MEMBER.MEMBER_ID%TYPE;
BEGIN
MEMBERS_ID:=:ENTER_MEMBER_ID;
SELECT * INTO MEMREC FROM MEMBER WHERE MEMBER_ID=MEMBERS_ID;
DBMS_OUTPUT.PUT_LINE('MEMBER NAME: ' || UPPER(MEMREC.MEMBER_NAME));
DBMS_OUTPUT.PUT_LINE('MEMBER NAME: ' || LOWER(MEMREC.MEMBER_NAME));
END;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 9:-
1.
DECLARE
ROWS_AFFECTED NUMBER;
BEGIN
UPDATE BOOKS SET COST=COST+10 WHERE COST<500;
ROWS_AFFECTED:=SQL%ROWCOUNT;
DBMS_OUTPUT.PUT_LINE('NUMBER OF ROWS AFFECTED: '||ROWS_AFFECTED);
END;
2.
DECLARE
MEM_ID NUMBER;
BEGIN
MEM_ID:=5;
UPDATE MEMBER SET MAX_BOOKS_ALLOWED=MAX_BOOKS_ALLOWED+2 WHERE MEMBER_ID=MEM_ID;
IF SQL%FOUND THEN
DBMS_OUTPUT.PUT_LINE('UPDATE SUCCESSFUL FOR: '||MEM_ID);
ELSE 
DBMS_OUTPUT.PUT_LINE('NO UPDATE PERFORM FOR: '||MEM_ID);
END IF;
END;
3.
DECLARE
MEMBER_ROW MEMBER%ROWTYPE;
CURSOR MEM_CURSOR IS SELECT * FROM MEMBER;
BEGIN
OPEN MEM_CURSOR;
LOOP
FETCH MEM_CURSOR INTO MEMBER_ROW;
EXIT WHEN MEM_CURSOR%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('MEMBER_ID: '||MEMBER_ROW.MEMBER_ID);
DBMS_OUTPUT.PUT_LINE('MEMBER_NAME: '||MEMBER_ROW.MEMBER_NAME);
END LOOP;
CLOSE MEM_CURSOR;
END;
4.
DECLARE
MEMBERS_ID MEMBER.MEMBER_ID%TYPE;
MAXX_BOOKS_ALLOWED MEMBER.MAX_BOOKS_ALLOWED%TYPE;
CURSOR MEM_CURSOR IS SELECT MEMBER_ID,MAX_BOOKS_ALLOWED FROM MEMBER;
BEGIN
OPEN MEM_CURSOR;
LOOP
FETCH MEM_CURSOR INTO MEMBERS_ID,MAXX_BOOKS_ALLOWED;
EXIT WHEN MEM_CURSOR%NOTFOUND;
MAXX_BOOKS_ALLOWED:=MAXX_BOOKS_ALLOWED-1;
IF MAXX_BOOKS_ALLOWED>= 0 THEN
DBMS_OUTPUT.PUT_LINE('MAX BOOKS ALLOWED FOR MEMBER ID: '||MEMBERS_ID||' DEDUCATED SUCCESSFULLY');
ELSE
DBMS_OUTPUT.PUT_LINE('ERROR: VALUE OF MAX BOOKS ALLOWED FOR MEMBER ID: '||MEMBERS_ID||' CANNOT BE LESS THAN 0');
END IF;
END LOOP;
CLOSE MEM_CURSOR;
END;
5.
CREATE TABLE BOOK_UPDATE(
BOOK_NO NUMBER(10),
BOOK_NAME VARCHAR2(30),
INCREAMENT_VALUE NUMBER(10),
UPDATE_DATE DATE
);

DECLARE
CURSOR BOOK_CURSOR IS SELECT BOOK_NO,BOOK_NAME,CATEGORY FROM BOOKS WHERE CATEGORY IN('Science','Database');
BOOKS_NO BOOKS.BOOK_NO%TYPE;
BOOKS_NAME BOOKS.BOOK_NAME%TYPE;
BOOKS_CATEGORY BOOKS.CATEGORY%TYPE;
INCREAMENTED_VALUE NUMBER;
BEGIN
OPEN BOOK_CURSOR;
LOOP
FETCH BOOK_CURSOR INTO BOOKS_NO,BOOKS_NAME,BOOKS_CATEGORY;
EXIT WHEN BOOK_CURSOR%NOTFOUND;
IF BOOKS_CATEGORY='Science' THEN
UPDATE BOOKS SET COST=COST+10 WHERE BOOK_NO=BOOKS_NO;
INCREAMENTED_VALUE:=10;
ELSIF BOOKS_CATEGORY='Database' THEN
UPDATE BOOKS SET COST=COST+20 WHERE BOOK_NO=BOOKS_NO;
INCREAMENTED_VALUE:=20;
END IF;
IF SQL%ROWCOUNT>0 THEN
INSERT INTO BOOK_UPDATE(BOOK_NO,BOOK_NAME,INCREAMENT_VALUE,UPDATE_DATE) VALUES(BOOKS_NO,BOOKS_NAME,INCREAMENTED_VALUE,SYSDATE);
END IF;
END LOOP;
CLOSE BOOK_CURSOR;
END;
6.
DECLARE
BOOK_ROW BOOKS%ROWTYPE;
CURSOR BOOK_CURSOR IS SELECT BOOK_NO,BOOK_NAME,AUTHOR_NAME,COST,CATEGORY
FROM(SELECT BOOK_NO,BOOK_NAME,AUTHOR_NAME,COST,CATEGORY,RANK() OVER (ORDER BY COST DESC) AS COST_RANK FROM BOOKS) WHERE COST_RANK<=5;
BEGIN
OPEN BOOK_CURSOR;
LOOP
FETCH BOOK_CURSOR INTO BOOK_ROW;
EXIT WHEN BOOK_CURSOR%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('BOOK_NO: '||BOOK_ROW.BOOK_NO);
DBMS_OUTPUT.PUT_LINE('BOOK_NAME: '||BOOK_ROW.BOOK_NAME);
DBMS_OUTPUT.PUT_LINE('AUTHOR_NAME: '||BOOK_ROW.AUTHOR_NAME);
DBMS_OUTPUT.PUT_LINE('COST: '||BOOK_ROW.COST);
DBMS_OUTPUT.PUT_LINE('CATEGORY: '||BOOK_ROW.CATEGORY);
END LOOP;
CLOSE BOOK_CURSOR;
END;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------